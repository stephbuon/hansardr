filtered_hansard_woman_1870 <- hansard_woman_1870 %>%
select(text)
adjective_noun_pairs <- extract_adj_noun_pairs(filtered_hansard_woman_1870$text)
library(posextractr)
posextract_install()
require(devtools)
install_github("stephbuon/posextractr")
library("posextractr")
posextract_install()
library("posextractr")
posextract_install()
library("posextractr")
posextract_install()
posextract_install()
require(devtools)
install_github("stephbuon/posextractr")
library("posextractr")
posextract_install()
Y
require(devtools)
install_github("stephbuon/posextractr")
library("posextractr")
posextract_install()
require(devtools)
install_github("stephbuon/posextractr")
require(devtools)
install_github("stephbuon/posextractr")
library("posextractr")
posextract_install()
require(devtools)
install_github("stephbuon/posextractr")
library("posextractr")
posextract_install()
posextract_install()
Y
posextract_initialize()
knitr::opts_chunk$set(echo = TRUE)
library(posextractr)
posextract_install()
Y
posextract_initialize()
library(tidyverse)
library(hansardr)
data("hansard_1870")
hansard_woman_1870 <- hansard_1870 %>%
filter(str_detect(text, regex("woman|women", ignore_case = T)))
head(hansard_woman_1870)
data("debate_metadata_1870")
debate_metadata_1870 <- debate_metadata_1870 %>%
select(sentence_id, speechdate)
hansard_woman_1870 <- left_join(hansard_woman_1870, debate_metadata_1870)
head(hansard_woman_1870)
filtered_hansard_woman_1870 <- hansard_woman_1870 %>%
select(text)
adjective_noun_pairs <- extract_adj_noun_pairs(filtered_hansard_woman_1870$text, lemmatize = T)
library(posextractr)
adjective_noun_pairs <- extract_adj_noun_pairs(filtered_hansard_woman_1870$text, lemmatize = T)
require(devtools)
install_github("stephbuon/posextractr")
require(devtools)
install_github("stephbuon/posextractr")
library("posextractr")
posextract_install()
Y
posextract_initialize()
adjective_noun_pairs <- extract_adj_noun_pairs(filtered_hansard_woman_1870$text, lemmatize = T)
adjective_noun_pairs <- extract_adj_noun_pairs(filtered_hansard_woman_1870$text, lemmatize = T)
library(posextractr)
triples <- extract_triples(hansard_woman_1870$text,
combine_adj = F,
lemmatize = T,
add_aux = F)
knitr::opts_chunk$set(echo = TRUE)
library(posextractr)
posextract_install()
posextract_initialize()
library(tidyverse)
library(hansardr)
data("hansard_1870")
hansard_woman_1870 <- hansard_1870 %>%
filter(str_detect(text, regex("woman|women", ignore_case = T)))
head(hansard_woman_1870)
data("debate_metadata_1870")
debate_metadata_1870 <- debate_metadata_1870 %>%
select(sentence_id, speechdate)
hansard_woman_1870 <- left_join(hansard_woman_1870, debate_metadata_1870)
head(hansard_woman_1870)
filtered_hansard_woman_1870 <- hansard_woman_1870 %>%
select(text)
adjective_noun_pairs <- extract_adj_noun_pairs(filtered_hansard_woman_1870$text, lemmatize = T)
library(posextractr)
adjective_noun_pairs <- extract_adj_noun_pairs(filtered_hansard_woman_1870$text, lemmatize = T)
test <- hansard_woman_1870 %>%
sample_n(1000)
triples <- extract_triples(test$text,
combine_adj = F,
lemmatize = T,
add_aux = F)
library(posextractr)
posextract_install()
Y
posextract_initialize()
adjective_noun_pairs <- extract_adj_noun_pairs(filtered_hansard_woman_1870$text, lemmatize = T)
require(devtools)
install_github("stephbuon/hansardr")
data("hansard_1800")
library(hansardr)
.libPaths()
require(devtools)
install_github("stephbuon/hansardr")
setwd("~/projects/hansardr")
devtools::document()
devtools::document()
library(devtools)
install_github("stephbuon/hansardr")
library(hansardr)
data(hansard_1800)
download_hansard()
download_hansard()
from <- paste0(hansardr_path, "uncompressed_data/data/")
to <- paste0(hansardr_path, "data/")
quiet(file.move(from, to))
hansardr_path <- paste0(.libPaths(), "/hansardr/")[1]
from <- paste0(hansardr_path, "uncompressed_data/data/")
to <- paste0(hansardr_path, "data/")
quiet(file.move(from, to))
file.move(from, to)
from
from
file.move(from, to)
list.files(paste0(hansardr_path, "uncompressed_data/data/"))
zip_file <- paste0(hansardr_path, "hansardr_data.zip")
unzip(zip_file, exdir = paste0(hansardr_path, "uncompressed_data"))
list.files(paste0(hansardr_path, "uncompressed_data/data/"))
hansardr_path <- paste0(.libPaths(), "/hansardr/")[1]
for(file in files) {
quiet(file.move(file, to)) }
hansard_files <- list.files(paste0(hansardr_path, "uncompressed_data/data/"))
to <- paste0(hansardr_path, "data/")
for(file in hansard_files) {
quiet(file.move(file, to)) }
for(file in hansard_files) {
quiet(file.move(file, to)) }
for(file in hansard_files) {
file.move(file, to) }
hansard_files
for(file in hansard_files) {
file.move(paste0(hansard_path, file), to) }
for(file in hansard_files) {
file.move(paste0(hansardr_path, file), to) }
hansard_files
paste0(hansardr_path, file
)
paste0(hansardr_path, "uncompressed_data/data/", file)
for(file in hansard_subset) {
file.move(paste0(hansardr_path, "uncompressed_data/data/", file), to) }
hansard_subset <- list.files(paste0(hansardr_path, "uncompressed_data/data/"))
to <- paste0(hansardr_path, "data/")
for(file in hansard_subset) {
file.move(paste0(hansardr_path, "uncompressed_data/data/", file), to) }
quiet(file.remove(paste0(hansardr_path, "hansardr_data.zip")))
quiet(file.remove(paste0(hansardr_path, "uncompressed_data")))
quiet(file.remove(paste0(hansardr_path, "uncompressed_data"), recursive = TRUE))
quiet(unlink(paste0(hansardr_path, "uncompressed_data"), recursive = TRUE))
unlink(paste0(hansardr_path, "uncompressed_data"), recursive = TRUE)
library(devtools)
install_github("stephbuon/hansardr")
library(hansardr)
library(devtools)
install_github("stephbuon/hansardr")
library(hansardr)
devtools::document()
devtools::document()
library(devtools)
install_github("stephbuon/hansardr")
library(hansardr)
data(hansard_1800)
download_hansard()
hansardr_path <- paste0(.libPaths(), "/hansardr/")[1]
download.file(url, fname, mode = "wb")
hansard_subset <- list.files(paste0(hansardr_path, "uncompressed_data/data/"))
to <- paste0(hansardr_path, "data/")
for(file in hansard_subset) {
file.move(paste0(hansardr_path, "uncompressed_data/data/", file), to) }
download_hansard()
download_hansard()
#' @importFrom utils download.file
#' @importFrom utils unzip
#' @importFrom ff file.move
#' @export
download_hansard <- function() {
print("This replaces the sample data with the full c19 Hansard corpus. Do you wish to continue?")
print("Press 1 to download.")
print("Press 2 to pass.")
input <- readline(prompt="Select Option: ")
if(input == 1) {
hansardr_path <- paste0(.libPaths(), "/hansardr/")[1]
url <- "https://smu.box.com/shared/static/34sxstotmquq2ud81r449nomlm0fcplp"
fname <- paste0(hansardr_path, "hansardr_data.zip")
if(file.exists(paste0(hansardr_path, "debate_metadata_1800.RData"))) {
if(file.info(paste0(hansardr_path, "debate_metadata_1800.RData"))$size > 900) {
remove_samples(hansardr_path) } }
tryCatch({
download.file(url, fname, mode = "wb")
zip_file <- paste0(hansardr_path, "hansardr_data.zip")
unzip(zip_file, exdir = paste0(hansardr_path, "uncompressed_data"))
hansard_subset <- list.files(paste0(hansardr_path, "uncompressed_data/data/"))
to <- paste0(hansardr_path, "data/")
for(file in hansard_subset) {
print(file)
file.move(paste0(hansardr_path, "uncompressed_data/data/", file), to) }
unlink(paste0(hansardr_path, "hansardr_data.zip"))
unlink(paste0(hansardr_path, "uncompressed_data"), recursive = TRUE) },
warning = function(cond) {
print("The c19 Hansard data cannot be downloaded. Please open a GitHub Issue if this problem persists.")
print("https://github.com/stephbuon/hansardr/issues") } ) }
else if (input == 2 ) {
invisible() } else {
print("Not a valid option. Exiting.") }
}
download_hansard()
#' @importFrom utils download.file
#' @importFrom utils unzip
#' @importFrom ff file.move
#' @export
download_hansard <- function() {
print("This replaces the sample data with the full c19 Hansard corpus. Do you wish to continue?")
print("Press 1 to download.")
print("Press 2 to pass.")
input <- readline(prompt="Select Option: ")
if(input == 1) {
hansardr_path <- paste0(.libPaths(), "/hansardr/")[1]
url <- "https://smu.box.com/shared/static/34sxstotmquq2ud81r449nomlm0fcplp"
fname <- paste0(hansardr_path, "hansardr_data.zip")
if(file.exists(paste0(hansardr_path, "debate_metadata_1800.RData"))) {
if(file.info(paste0(hansardr_path, "debate_metadata_1800.RData"))$size > 900) {
remove_samples(hansardr_path) } }
tryCatch({
download.file(url, fname, mode = "wb")
zip_file <- paste0(hansardr_path, "hansardr_data.zip")
unzip(zip_file, exdir = paste0(hansardr_path, "uncompressed_data"))
hansard_subset <- list.files(paste0(hansardr_path, "uncompressed_data/data/"))
to <- paste0(hansardr_path, "data/")
for(file in hansard_subset) {
file.move(paste0(hansardr_path, "uncompressed_data/data/", file), to) }
print('hi')
unlink(paste0(hansardr_path, "hansardr_data.zip"))
unlink(paste0(hansardr_path, "uncompressed_data"), recursive = TRUE)
},
warning = function(cond) {
print("The c19 Hansard data cannot be downloaded. Please open a GitHub Issue if this problem persists.")
print("https://github.com/stephbuon/hansardr/issues") } ) }
else if (input == 2 ) {
invisible() } else {
print("Not a valid option. Exiting.") }
}
download_hansard()
for(file in hansard_subset) {
file.move(paste0(hansardr_path, "uncompressed_data/data/", file), to) }
#' @importFrom utils download.file
#' @importFrom utils unzip
#' @importFrom ff file.move
#' @export
download_hansard <- function() {
print("This replaces the sample data with the full c19 Hansard corpus. Do you wish to continue?")
print("Press 1 to download.")
print("Press 2 to pass.")
input <- readline(prompt="Select Option: ")
if(input == 1) {
hansardr_path <- paste0(.libPaths(), "/hansardr/")[1]
url <- "https://smu.box.com/shared/static/34sxstotmquq2ud81r449nomlm0fcplp"
fname <- paste0(hansardr_path, "hansardr_data.zip")
if(file.exists(paste0(hansardr_path, "debate_metadata_1800.RData"))) {
if(file.info(paste0(hansardr_path, "debate_metadata_1800.RData"))$size > 900) {
remove_samples(hansardr_path) } }
tryCatch({
download.file(url, fname, mode = "wb")
zip_file <- paste0(hansardr_path, "hansardr_data.zip")
unzip(zip_file, exdir = paste0(hansardr_path, "uncompressed_data"))
hansard_subset <- list.files(paste0(hansardr_path, "uncompressed_data/data/"))
to <- paste0(hansardr_path, "data/")
for(file in hansard_subset) {
file.move(paste0(hansardr_path, "uncompressed_data/data/", file), to) }
unlink(paste0(hansardr_path, "hansardr_data.zip"))
unlink(paste0(hansardr_path, "uncompressed_data"), recursive = TRUE)
},
warning = function(cond) {
print("The c19 Hansard data cannot be downloaded. Please open a GitHub Issue if this problem persists.")
print("https://github.com/stephbuon/hansardr/issues") } ) }
else if (input == 2 ) {
invisible() } else {
print("Not a valid option. Exiting.") }
}
download_hansard()
#' @importFrom utils download.file
#' @importFrom utils unzip
#' @importFrom ff file.move
#' @export
download_hansard <- function() {
print("This replaces the sample data with the full c19 Hansard corpus. Do you wish to continue?")
print("Press 1 to download.")
print("Press 2 to pass.")
input <- readline(prompt="Select Option: ")
if(input == 1) {
hansardr_path <- paste0(.libPaths(), "/hansardr/")[1]
url <- "https://smu.box.com/shared/static/34sxstotmquq2ud81r449nomlm0fcplp"
fname <- paste0(hansardr_path, "hansardr_data.zip")
if(file.exists(paste0(hansardr_path, "debate_metadata_1800.RData"))) {
if(file.info(paste0(hansardr_path, "debate_metadata_1800.RData"))$size > 900) {
remove_samples(hansardr_path) } }
#tryCatch({
download.file(url, fname, mode = "wb")
zip_file <- paste0(hansardr_path, "hansardr_data.zip")
unzip(zip_file, exdir = paste0(hansardr_path, "uncompressed_data"))
hansard_subset <- list.files(paste0(hansardr_path, "uncompressed_data/data/"))
to <- paste0(hansardr_path, "data/")
for(file in hansard_subset) {
file.move(paste0(hansardr_path, "uncompressed_data/data/", file), to) }
unlink(paste0(hansardr_path, "hansardr_data.zip"))
unlink(paste0(hansardr_path, "uncompressed_data"), recursive = TRUE)
#},
# warning = function(cond) {
#  print("The c19 Hansard data cannot be downloaded. Please open a GitHub Issue if this problem persists.")
#  print("https://github.com/stephbuon/hansardr/issues") } )
}
else if (input == 2 ) {
invisible() } else {
print("Not a valid option. Exiting.") }
}
download_hansard()
devtools::document()
#' @importFrom utils download.file
#' @importFrom utils unzip
#' @importFrom ff file.move
#' @export
download_hansard <- function() {
print("This replaces the sample data with the full c19 Hansard corpus. Do you wish to continue?")
print("Press 1 to download.")
print("Press 2 to pass.")
input <- readline(prompt="Select Option: ")
if(input == 1) {
hansardr_path <- paste0(.libPaths(), "/hansardr/")[1]
url <- "https://smu.box.com/shared/static/34sxstotmquq2ud81r449nomlm0fcplp"
fname <- paste0(hansardr_path, "hansardr_data.zip")
if(file.exists(paste0(hansardr_path, "debate_metadata_1800.RData"))) {
if(file.info(paste0(hansardr_path, "debate_metadata_1800.RData"))$size > 900) {
remove_samples(hansardr_path) } }
tryCatch(
expr = {
download.file(url, fname, mode = "wb")
zip_file <- paste0(hansardr_path, "hansardr_data.zip")
unzip(zip_file, exdir = paste0(hansardr_path, "uncompressed_data"))
hansard_subset <- list.files(paste0(hansardr_path, "uncompressed_data/data/"))
to <- paste0(hansardr_path, "data/")
for(file in hansard_subset) {
file.move(paste0(hansardr_path, "uncompressed_data/data/", file), to) }
unlink(paste0(hansardr_path, "hansardr_data.zip"))
unlink(paste0(hansardr_path, "uncompressed_data"), recursive = TRUE)
},
warning = function(cond) {
print("The c19 Hansard data cannot be downloaded. Please open a GitHub Issue if this problem persists.")
print("https://github.com/stephbuon/hansardr/issues") } )
}
else if (input == 2 ) {
invisible() } else {
print("Not a valid option. Exiting.") }
}
download_hansard()
#' @importFrom utils download.file
#' @importFrom utils unzip
#' @importFrom ff file.move
#' @export
download_hansard <- function() {
print("This replaces the sample data with the full c19 Hansard corpus. Do you wish to continue?")
print("Press 1 to download.")
print("Press 2 to pass.")
input <- readline(prompt="Select Option: ")
if(input == 1) {
hansardr_path <- paste0(.libPaths(), "/hansardr/")[1]
url <- "https://smu.box.com/shared/static/34sxstotmquq2ud81r449nomlm0fcplp"
fname <- paste0(hansardr_path, "hansardr_data.zip")
if(file.exists(paste0(hansardr_path, "debate_metadata_1800.RData"))) {
if(file.info(paste0(hansardr_path, "debate_metadata_1800.RData"))$size > 900) {
remove_samples(hansardr_path) } }
tryCatch(
expr = {
download.file(url, fname, mode = "wb")
zip_file <- paste0(hansardr_path, "hansardr_data.zip")
unzip(zip_file, exdir = paste0(hansardr_path, "uncompressed_data"))
hansard_subset <- list.files(paste0(hansardr_path, "uncompressed_data/data/"))
to <- paste0(hansardr_path, "data/")
for(file in hansard_subset) {
file.move(paste0(hansardr_path, "uncompressed_data/data/", file), to) }
unlink(paste0(hansardr_path, "hansardr_data.zip"))
unlink(paste0(hansardr_path, "uncompressed_data"), recursive = TRUE)
} #,
# warning = function(cond) {
#    print("The c19 Hansard data cannot be downloaded. Please open a GitHub Issue if this problem persists.")
#    print("https://github.com/stephbuon/hansardr/issues") }
)
}
else if (input == 2 ) {
invisible() } else {
print("Not a valid option. Exiting.") }
}
download_hansard()
#' @importFrom utils download.file
#' @importFrom utils unzip
#' @importFrom ff file.move
#' @export
download_hansard <- function() {
print("This replaces the sample data with the full c19 Hansard corpus. Do you wish to continue?")
print("Press 1 to download.")
print("Press 2 to pass.")
input <- readline(prompt="Select Option: ")
if(input == 1) {
hansardr_path <- paste0(.libPaths(), "/hansardr/")[1]
url <- "https://smu.box.com/shared/static/34sxstotmquq2ud81r449nomlm0fcplp"
fname <- paste0(hansardr_path, "hansardr_data.zip")
if(file.exists(paste0(hansardr_path, "debate_metadata_1800.RData"))) {
if(file.info(paste0(hansardr_path, "debate_metadata_1800.RData"))$size > 900) {
remove_samples(hansardr_path) } }
tryCatch(
expr = {
download.file(url, fname, mode = "wb")
zip_file <- paste0(hansardr_path, "hansardr_data.zip")
unzip(zip_file, exdir = paste0(hansardr_path, "uncompressed_data"))
hansard_subset <- list.files(paste0(hansardr_path, "uncompressed_data/data/"))
to <- paste0(hansardr_path, "data/")
for(file in hansard_subset) {
file.move(paste0(hansardr_path, "uncompressed_data/data/", file), to) }
unlink(paste0(hansardr_path, "hansardr_data.zip"))
unlink(paste0(hansardr_path, "uncompressed_data"), recursive = TRUE)
} ,
error = function(e) {
print("The c19 Hansard data cannot be downloaded. Please open a GitHub Issue if this problem persists.")
print("https://github.com/stephbuon/hansardr/issues") }
)
}
else if (input == 2 ) {
invisible() } else {
print("Not a valid option. Exiting.") }
}
download_hansard()
#' @importFrom utils download.file
#' @importFrom utils unzip
#' @importFrom ff file.move
#' @export
download_hansard <- function() {
print("This replaces the sample data with the full c19 Hansard corpus. Do you wish to continue?")
print("Press 1 to download.")
print("Press 2 to pass.")
input <- readline(prompt="Select Option: ")
if(input == 1) {
hansardr_path <- paste0(.libPaths(), "/hansardr/")[1]
url <- "https://smu.box.com/shared/static/34sxstotmquq2ud81r449nomlm0fcplp"
fname <- paste0(hansardr_path, "hansardr_data.zip")
if(file.exists(paste0(hansardr_path, "debate_metadata_1800.RData"))) {
if(file.info(paste0(hansardr_path, "debate_metadata_1800.RData"))$size > 900) {
remove_samples(hansardr_path) } }
tryCatch(
expr = {
download.file(url, fname, mode = "wb")
zip_file <- paste0(hansardr_path, "hansardr_data.zip")
unzip(zip_file, exdir = paste0(hansardr_path, "uncompressed_data"))
hansard_subset <- list.files(paste0(hansardr_path, "uncompressed_data/data/"))
to <- paste0(hansardr_path, "data/")
for(file in hansard_subset) {
file.move(paste0(hansardr_path, "uncompressed_data/data/", file), to) }
unlink(paste0(hansardr_path, "hansardr_data.zip"))
unlink(paste0(hansardr_path, "uncompressed_data"), recursive = TRUE) },
error = function(e) {
print("The c19 Hansard data cannot be downloaded. Please open a GitHub Issue if this problem persists.")
print("https://github.com/stephbuon/hansardr/issues") } ) }
else if (input == 2 ) {
invisible() }
else {
print("Not a valid option. Exiting.") } }
download_hansard()
devtools::document()
rm(list = c("download_hansard"))
devtools::document()
library(devtools)
install_github("stephbuon/hansardr")
library(hansardr)
devtools::document()
library(devtools)
install_github("stephbuon/hansardr")
library(hansardr)
library(devtools)
install_github("stephbuon/hansardr")
library(hansardr)
devtools::document()
library(devtools)
install_github("stephbuon/hansardr")
library(hansardr)
data(hansard_1800)
download_hansard()
data(hansard_1800)
data(hansard_1800)
download_hansard()
data(hansard_1800)
library(devtools)
install_github("stephbuon/hansardr")
library(hansardr)
library(devtools)
install_github("stephbuon/hansardr", force=TRUE)
library(hansardr)
download_hansard()
paste0(.libPaths(), "/hansardr/")[1]
paste0(.libPaths(), "/hansardr/data")[1]
list.files(paste0(.libPaths(), "/hansardr/data"))
