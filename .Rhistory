mainPanel(plotlyOutput(NS(id, "collocates_top")),
plotlyOutput(NS(id, "collocates_bottom")))
))}
collocates_server <- function(id) {
moduleServer(id, function(input, output, session) {
output$suggestion_1 <- renderUI({
if (input$vocabulary == "all") {
actionButton("suggestion_1", label = "law", style = "width: 179px;") }
else if (input$vocabulary == "property") {
actionButton("suggestion_1", label = "tenant", style = "width: 179px;") }
else if (input$vocabulary == "concerns") {
actionButton("suggestion_1", label = "poor", style = "width: 179px;") }  })
output$suggestion_2 <- renderUI({
if (input$vocabulary == "all") {
actionButton("suggestion_2", label = "woman", style = "width: 179px;") }
else if (input$vocabulary == "property") {
actionButton("suggestion_2", label = "property", style = "width: 179px;") }
else if (input$vocabulary == "concerns") {
actionButton("suggestion_2", label = "coal", style = "width: 179px;") }  })
output$suggestion_3 <- renderUI({
if (input$vocabulary == "all") {
actionButton("suggestion_3", label = "men", style = "width: 179px;") }
else if (input$vocabulary == "property") {
actionButton("suggestion_3", label = "rent", style = "width: 179px;") }
else if (input$vocabulary == "concerns") {
actionButton("suggestion_3", label = "future", style = "width: 179px;") } })
output$suggestion_4 <- renderUI({
if (input$vocabulary == "all") {
actionButton("suggestion_4", label = "government", style = "width: 179px;") }
else if (input$vocabulary == "property") {
actionButton("suggestion_4", label = "landlord", style = "width: 179px;") }
else if (input$vocabulary == "concerns") {
actionButton("suggestion_4", label = "industry", style = "width: 179px;") }})
observeEvent(input$btnLabel,{
vals$btn=TRUE
vals$text=FALSE })
observeEvent(input$custom_search,{
vals$btn=FALSE
vals$text=TRUE })
# observeEvent(input[["keyPressed"]], {
#   vals$btn=FALSE
#   vals$text=TRUE
# })
get_tf_idf <- reactive({
if (input$measure == "tf-idf") {
fname <- paste0(data_dir, "collocates/tf-idf-data/tf_idf_", input$decade_collocates_top, "_", input$decade_collocates_bottom, "_", input$vocabulary, "_adj_noun_pairs.csv")
fname_reverse <- paste0(data_dir, "collocates/tf-idf-data/tf_idf_", input$decade_collocates_bottom, "_", input$decade_collocates_top, "_", input$vocabulary, "_adj_noun_pairs.csv")
if (file.exists(fname)|file.exists(fname_reverse)) {
if (file.exists(fname)) {
df <- fread(fname) }
else {
df <- fread(fname_reverse) } }
else {
tf_idf_ct(collocates_top(), collocates_bottom(), input$vocabulary, input$custom_search, fname) } } })
collocates_top <- reactive ({
collocates_top <- import_collocates_data(data_dir, input$decade_collocates_top, input$vocabulary)})
collocates_bottom <- reactive ({
collocates_bottom <- import_collocates_data(data_dir, input$decade_collocates_bottom, input$vocabulary) })
return_data <- function(collocates, measure, decade_slider, vals, match_type, custom_search, btnLabel, sentiment) {
#if (measure == "count") {
#collocates <- collocates_top() }
if (measure == "tf-idf") {
collocates <- get_tf_idf() }
setkey(collocates, decade)
collocates <- collocates[.(as.numeric(decade_slider))]
collocates <- search_ct(collocates, vals, match_type, custom_search, btnLabel)
collocates <- filter_sentiment_ct(collocates, sentiment)
collocates <- collocates[order(collocates, -n)]
top <- collocates[1:20]
}
top_plot <- reactive ({
return_data(collocates_top(), input$measure, input$decade_collocates_top, vals$text, input$match_type, input$custom_search, input$btnLabel, input$sentiment) }) #%>%
#bindCache(collocates_top(), collocates_bottom(), input$measure, input$decade_collocates_top, vals$text, input$match_type, input$custom_search, input$btnLabel, input$sentiment)
# bottom_plot <- reactive ({
#   return_data(collocates, input$measure, input$decade_collocates_bottom, vals$text, input$match_type, input$custom_search, input$btnLabel, input$sentiment) }) %>%
#
#
# })
output$collocates_top <- renderPlotly({
if (input$measure == "count") {
xlab <- list(title ="Raw Count") }
else if (input$measure == "tf-idf") {
xlab <- list(title ="tf-idf") }
plot_ly(data = top_plot(),
x = ~n,
y = ~reorder(grammatical_collocates, n),
type = 'bar',
text = n,
orientation = 'h',
marker= list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = input$decade_collocates_top,
xaxis = xlab,
yaxis = list(title = "")) %>%
config(displayModeBar = F) }) #%>%
#bindCache(collocates_top(), collocates_bottom(), input$measure, input$decade_collocates_top, vals$text, input$match_type, input$custom_search, input$btnLabel, input$sentiment)
output$collocates_bottom <- renderPlotly({
if (input$measure == "count") {
collocates <- collocates_bottom()
xlab <- list(title ="Raw Count") }
else if (input$measure == "tf-idf") {
collocates <- get_tf_idf()
xlab <- list(title ="tf-idf") }
setkey(collocates, decade)
collocates <- collocates[.(as.numeric(input$decade_collocates_bottom))]
collocates <- search_ct(collocates, vals$text, input$match_type, input$custom_search, input$btnLabel)
collocates <- filter_sentiment_ct(collocates, input$sentiment)
collocates <- collocates[order(collocates, -n)]
top <- collocates[1:20]
plot_ly(data = top,
x = ~n,
y = ~reorder(grammatical_collocates, n),
type = 'bar',
text = n,
orientation = 'h',
marker= list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = input$decade_collocates_bottom,
xaxis = xlab,
yaxis = list(title = "")) %>%
config(displayModeBar = F) })
observeEvent(input$about_collocates, {
showModal(modalDialog(
title = "Special Vocabulary: Sentiment Laden Collocates",
"A collocate is a series of words that co-occur in text.
A grammatical collocate represents the co-occuring words that share a sentence-level grammatical relationship.",
br(),
p(),
strong("Controls:"),
"Click a radio button under \"Special Vocabulary\" to select a scholar curated vocabulary list to guide your search.",
br(),
p(),
"Slide the dials under \"Decade\" to change time periods",
br(),
p(),
"Choose a keyword from the drop down box to narrow your analysis to just collocates containing that word.
The keywords will update based on the selected vocabulary list.",
br(),
p(),
"Slide the dial under \"Sentiment\" to narrow your analysis from all sentiment laden collocates to just those with positive or negative scores.",
br(),
p(),
"Click a radio button under \"Measure\" to return results based on:
a) a frequency count; b) term frequency - inverse document frequency (tf-idf); or c) Jenson-Shannon divergence (jsd).",
br(),
p(),
strong("Measurements:"),
"\"Count\" refers to the number of times a pair of collocates appeared in a sentence in the debate text.",
br(),
p(),
"\"tf-idf\" is a numerical statistic that reflects how \"distinctive\" a word is to a corpus.
The tfâ€“idf value increases proportionally to the number of times a word appears in a decade and is offset by the other decade that contains the word,
which helps to adjust the results for the fact that some words appear more frequently in general.",
br(),
p(),
"\"jsd\" is a " )) })
} ) }
word_context_ui <- function(id) {
tagList(
sidebarLayout(
sidebarPanel(
#useShinyjs(),
#extendShinyjs(text = "shinyjs.resetClick = function() { Shiny.onInputChange('.clientValue-plotly_click', 'null'); }", functions = c("resetClick")),
actionButton(NS(id, "about_word_context"),
"About This Page",
style="color: #fff; background-color: #337ab7;
border-color: #2e6da4;
width: 179px;
padding:4px;
font-size:90%"),
p(),
textInput(NS(id, "search_similarity"),
"Keyword:",
value = "harvest"),
sliderTextInput(
inputId = NS(id,"window_size"),
label = "Window Size: ",
grid = TRUE,
force_edges = TRUE,
choices = c("1",
"2",
"3",
"4",
"5",
"6",
"7",
"8",
"9",
"10",
"Full"),
selected = "5"),
actionButton(NS(id, 'download_similarity'),
"Download Plot",
style = "width: 179px;"),
width = 2),
mainPanel(plotlyOutput(NS(id, "word_context")),
br(), br(),
br(), br(),
br(), br(),
br(), br(),
br(), br(),
br(), br(),
dataTableOutput(NS(id, 'aab')),
tags$script('document.getElementById("word_context-download_similarity").onclick = function() {
var gd = document.getElementById("word_context-word_context");
Plotly.Snapshot.toImage(gd, {format: "png"}).once("success", function(url) {
var a = window.document.createElement("a");
a.href = url;
a.type = "image/png";
a.download = "plot.png";
document.body.appendChild(a);
a.click();
document.body.removeChild(a);
});
} '))
))}
word_context_server <- function(id) {
moduleServer(id, function(input, output, session) {
output$word_context <- renderPlotly({
# observeEvent(input$search_similarity, {
#   js$resetClick()
# })
search_word <- tolower(input$search_similarity)
out <- data.frame()
decades <- c(1800, 1810, 1820, 1830, 1840, 1850, 1860, 1870, 1880, 1890)
for(d in 1:length(decades)) {
fdecade <- decades[d]
table <- paste0(data_dir, "word_embeddings/hansard_decades_wordvectors_11222021/hansard_word_vectors_", fdecade, ".txt")
word_vectors <- as.matrix(read.table(table, as.is = TRUE))
if(search_word %in% rownames(word_vectors)) {
kw = word_vectors[search_word, , drop = F]
cos_sim_rom = sim2(x = word_vectors, y = kw, method = "cosine", norm = "l2")
forplot <- as.data.frame(sort(cos_sim_rom[,1], decreasing = T)[2:16])
colnames(forplot)[1] <- "similarity"
forplot$word <- rownames(forplot)
forplot <- forplot %>%
mutate(decade = fdecade)
out <- bind_rows(out, forplot) } }
out <- out %>%
mutate(row_id = seq(along.with = out$word, from = 0)) # could be any column
render_value_8(out) # added
plot_ly(data = out,
x = ~decade,
y = ~similarity,
mode = "markers+text",
text = ~word,
type = "scatter",
source = "aa", # added
marker = list(color = 'rgb(158,202,225)',
size = 15,
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
textposition = "center right",
height=650) %>%
layout(xaxis = list(autotick = F,
tickmode = "array",
tickvals = c(1800, 1810, 1820, 1830, 1840, 1850, 1860, 1870, 1880, 1890),
dtick = 10,
range = c(1790, 1900)),
title = paste0("Words Context for ", "\"", input$search_similarity, "\"", " via Embeddings")) %>%
config(displayModeBar = F) })
render_value_8 = function(NN){
output$aab <- renderDataTable({
s <- event_data("plotly_click", source = "aa")  # change on click, not on shiny input change
validate(need(!is.null(s), "Click on a point to see PLACEHOLDER"))
jkl <- NN %>%
filter(row_id == s$pointNumber)
word <- jkl$word
# what if I filter -- then make corpus??
#j <- as.data.table(memo_quanteda_kwic(cached_hansard_1800, word))
#j <- set_window_size(j, input$window_size)
#j <- select(j, -docname, -to, -from, -pattern)
j <- memo_quanteda_kwic(cached_hansard_1800, word)
j <- set_window_size(j, input$window_size)
return(datatable(j,
options = list(dom = 'ip'),
filter = list(position = "top")))
}) }
observeEvent(input$about_word_context, {
showModal(modalDialog(
title = "",
"DEFINE",
br(),
p(),
strong("Controls:"),
"Type a single word into the search box to view its most closely associated words throughout the period.",
br(),
p(),
strong("Measurement:"),
"" ))
})
}) }
ui <- fluidPage(
collocates_ui("collocates")
)
server <- function(input, output, session) {
collocates_server("collocates")
}
shinyApp(ui, server)
import_collocates_data <- function(data_dir, slider, input_vocabulary) {
collocates_data <- fread(paste0(data_dir, "collocates/", "clean_", input_vocabulary, "_adj_noun_collocates.csv"), key = "decade")
collocates_data <- collocates_data[.(as.numeric(slider))]
return(collocates_data) }
filter_sentiment_ct <- function(df, sw) {
if(sw == "All") {
return(df) }
df <- df %>%
filter(sentiment == sw)
return (df) }
tf_idf_ct <- function(df1, df2, vocabulary, custom_search, fname) {
df <- bind_rows(df1, df2)
df <- df %>%
bind_tf_idf(grammatical_collocates, decade, n)
df <- df %>%
select(-n) %>%
rename(n = tf_idf)
if (vocabulary != "property") {
if (custom_search == "") {
fwrite(df, fname) } }
return(df)}
search_ct <- function(collocates, vals, match_type, custom_search, btnLabel) {
if (vals) { # & textbox != ""
if (custom_search != "") {
if (match_type == "include") {
collocates <- collocates[grammatical_collocates %like% paste0(custom_search, "(.*)$|^(.*)", custom_search)]}
else {
collocates <- collocates[grammatical_collocates %like% paste0("^", custom_search, "\\b|\\b", custom_search, "$")]} } }
else {
if (match_type == "include") {
collocates <- collocates[grammatical_collocates %like% paste0(btnLabel, "(.*)$|^(.*)", btnLabel)]}
else {
collocates <- collocates[grammatical_collocates %like% paste0("^", btnLabel, "\\b|\\b", btnLabel, "$")]} }
return(collocates)}
source('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
source('~/projects/hansard-shiny/app/modules/collocates/collocates_functions.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('test.R')
runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app/modules/test.R')
source('~/projects/hansard-shiny/app/modules/collocates/collocates_functions.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
source('~/projects/hansard-shiny/app/modules/collocates/collocates_functions.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app')
runApp()
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app/modules/test.R')
runApp('~/projects/hansard-shiny/app')
runApp()
source('~/projects/hansard-shiny/app/modules/context/context.R')
runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app')
shiny::runApp('~/projects/hansard-shiny/app')
runApp()
runApp('~/projects/hansard-shiny/app')
shiny::runApp('~/projects/hansard-shiny/app')
a <- read_csv("/home/stephbuon/projects/hansard_nation_counts_check.csv")
library(readr)
a <- read_csv("/home/stephbuon/projects/hansard_nation_counts_check.csv")
b <- a %>%
summarise(nation_count = sum(nation_count))
library(dplyr)
b <- a %>%
summarise(nation_count = sum(nation_count))
b <- a %>%
group_by(nation, decade)
b <- a %>%
group_by(nation, decade) %>%
summarise(nation_count = sum(nation_count))
View(b)
b <- counted_nations_w_decade %>%
group_by(nation, decade) %>%
summarise(nation_count = sum(nation_count))
fwrite(b, paste0(dir, "hansard_nation_counts.csv"))
library(data.table)
fwrite(b, paste0(dir, "hansard_nation_counts.csv"))
fwrite(b, paste0("~/", "hansard_nation_counts.csv"))
shiny::runApp('~/projects/hansard-shiny/app')
counted_nations_w_decade <- read_csv("/home/stephbuon/projects/hansard-shiny/CATEGORIZE/hansard_nation_counts_check.csv")
library(data.table)
library(dplyr)
library(readr)
library(stringr)
counted_nations_w_decade <- read_csv("/home/stephbuon/projects/hansard-shiny/CATEGORIZE/hansard_nation_counts_check.csv")
counted_nations_w_decade <- counted_nations_w_decade %>%
group_by(nation, decade) %>%
summarise(nation_count = sum(nation_count))
View(counted_nations_w_decade)
counted_nations_w_decade <- counted_nations_w_decade %>%
group_by(nation, decade) %>%
count()
View(counted_nations_w_decade)
counted_nations_w_decade <- read_csv("/home/stephbuon/projects/hansard-shiny/CATEGORIZE/hansard_nation_counts_check.csv")
View(counted_nations_w_decade)
z <- counted_nations_w_decade %>%
group_by(nation, decade) %>%
summarise(nation_count = sum(nation_count))
View(z)
z <- counted_nations_w_decade %>%
group_by(nation, decade) %>%
summarise(a = sum(nation_count))
View(z)
z <- counted_nations_w_decade %>%
#group_by(nation, decade) %>%
summarise(nation_count = sum(nation_count))
View(z)
z <- counted_nations_w_decade %>%
#group_by(nation, decade) %>%
summarise(nation_count = sum(n()))
z <- counted_nations_w_decade %>%
group_by(nation, decade) %>%
summarise(nation_count = sum(n()))
View(z)
u
counted_nations_w_decade <- read_csv("/home/stephbuon/projects/hansard-shiny/CATEGORIZE/hansard_nation_counts_check.csv")
View(counted_nations_w_decade)
counted_nations_w_decade[ ,list(sum=sum(nation_count)), by=c(nation, decade)]
z <- counted_nations_w_decade %>%
group_by(nation, decade) %>%
summarise(nation_count = sum(nation_count))
View(z)
View(counted_nations_w_decade)
shiny::runApp('~/projects/hansard-shiny/app')
shiny::runApp('~/projects/hansard-shiny/app')
shiny::runApp('~/projects/hansard-shiny/app')
shiny::runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app')
library(tidyverse)
a <- read_csv("/home/stephbuon/projects/hansard-shiny/hansard_nation_counts.csv")
z <- a %>%
group_by(nation, decade) %>%
summarise(nation_count = sum(nation_count))
View(z)
write_csv(z, "/home/stephbuon/projects/hansard-shiny/hansard_nation_counts.csv")
runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app')
a <- read_csv("/home/stephbuon/projects/hansard-shiny/hansard_nation_counts.csv")
a$nation <- str_replace(a, "_", " ")
a$nation <- str_replace(a$nation, "_", " ")
View(a)
a$nation <- str_replace_all(a$nation, "_", " ")
View(a)
a$nation <- a$nation %>%
tolower()
View(a)
a <- a %>%
group_by(nation, decade) %>%
summarise(nation_count = sum(nation_count))
View(a)
write_csv(a, "/home/stephbuon/projects/hansard-shiny/hansard_nation_counts_2.csv")
runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app')
a <- read_csv("/home/stephbuon/projects/hansard-shiny/hansard_nation_counts.csv")
a$nation <- a$nation %>%
str_to_title()
a <- a %>%
group_by(nation, decade) %>%
summarise(nation_count = sum(nation_count))
write_csv(a, "/home/stephbuon/projects/hansard-shiny/hansard_nation_counts_2.csv")
runApp('~/projects/hansard-shiny/app')
runApp('~/projects/hansard-shiny/app')
